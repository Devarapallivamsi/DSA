Pb links may be present on striver's website.

1.Searching minimum in rotated sorted array
import math

nums = [4, 5, 6, 7, 1, 2, 3]
minEle = math.inf
low = 0
high = len(nums) - 1

while low <= high:
    mid = (low + high) // 2
    # left half is sorted;
    if nums[mid] >= nums[low]:
        minEle = min(nums[low], minEle)
        low = mid + 1
    else:
        minEle = min(nums[mid], minEle)
        # right half is sorted;
        high = mid - 1
print(minEle)

======================================================================================

2.Finding pivotIdx (Index of min element) in a rotated sorted array:
import math

nums = [4, 5, 6, 2, 3]
left = 0
right = len(nums) - 1
pivot = math.inf
pivotIdx = None
while left < right:
    mid = (left + right) // 2
    pivot = min(pivot, nums[mid])
    if nums[left] <= nums[mid]:
        if nums[left] <= pivot:
            pivotIdx = left
        left = mid + 1
    else:
        if nums[mid] <= pivot:
            pivotIdx = mid
        right = mid - 1

print(f'pivotIdx: {pivotIdx}')
======================================================================================
3.searching element in rotated sorted array 1
'''
approach 1
Find the pivot by traversing the array linearly and in the process if you find k, break and return the idx.
and how to find the pivot? start from left and stop at the index where there is a decrease.
now,even after finding the pivot if I didn't find my ans,my target is in the right half and I shall do a binary search 
with low = pivotIndex +  1 and high = len(arr) - 1
'''
pivotIdx = 0
pos = -1
while arr[pivotIdx] < arr[pivotIdx + 1]:
    if arr[pivotIdx] == target:
        pos = pivotIdx
        break
    pivotIdx += 1
if pos == -1:
    low = pivotIdx + 1
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            pos = mid
            break
        elif arr[mid] > target:
            high = mid - 1
        else:
            low = mid + 1
print(pos)

'''
'''
approach 2
Take low and high and in a while loop, compute mid and if nums[mid] == target, return mid;find the sorted half with 
the logic that if nums[mid] > nums[low] --> left half is sorted
else right half is sorted.
after finding sorted half, check if target is in sorted half's range, if not update the pointers.
This works in a greedy approach in a sense by looking out only for sorted portion and updating pointers.
'''

low = 0
high = len(nums) - 1
while low <= high:
    mid = (low + high) // 2
    if nums[mid] == target:
        return mid
    if nums[low] < nums[mid]:
        """
        Left portion is sorted and right portion is distorted.
        """
        if nums[low] <= target < nums[mid]:
            high = mid - 1
        else:
            low = mid + 1
    else:
        """
        Right portion is sorted and left portion is distorted.
        """
        if nums[high] >= target > nums[mid]:
            low = mid + 1
        else:
                    high = mid - 1

======================================================================================

4.  Finding element in rotated sorted array 2(array having duplicates)
"""
Approach: Just increment low and decrement high by one.Reason: I have got to know that nums[mid] is not my target,
so neither nums[low](=nums[mid]) or nums[high](=nums[mid]) will be my target!!
"""
low = 0
high = len(nums) - 1
while low <= high:
    mid = (low + high) // 2
    if nums[mid] == target:
        return mid
    if nums[low] == nums[mid] == nums[high]:
        low += 1
        high -= 1
        continue
    if nums[low] < nums[mid]:
        """
        Left portion is sorted and right portion is distorted.
        """
        if nums[low] <= target < nums[mid]:
            high = mid - 1
        else:
            low = mid + 1
    else:
        """
        Right portion is sorted and left portion is distorted.
        """
        if nums[high] >= target > nums[mid]:
            low = mid + 1
        else:
            high = mid - 1

======================================================================================

5. Finding the only single occurring element where all others occur twice.
nums = [3, 3, 7, 7, 8, 8, 9, 11, 11]
low = 1
high = len(nums) - 2
while low <= high:
    mid = (low + high) // 2
    if nums[mid] != nums[mid - 1] and nums[mid] != nums[mid + 1]:
        print(nums[mid])
        break
    if (mid % 2 == 0 and nums[mid] == nums[mid + 1]) or (mid % 2 != 0 and nums[mid] == nums[mid - 1]):
        # I am on the left half and eliminate it.
        low = mid + 1
    else:
        # I am on the right half and eliminate it.
        high = mid - 1

===========================================================================================
6.# Finding the peak element(not pivot in rotated array!!) Idx in the array.
peak: An element that's greater than both of it's neighbours.
Note: nums[i] != nums[i - 1] != nums[i + 1]

eg:
1. [1,4,7] possible ans(Idx): 1
2. [1,2,3,4,5,6,4,1,2,9,3] possible ans(Idx): 6, 9;
Approach:
If I am on the point where its prev number is greater, it implies that I am on a downward slope
so I have to move up.i.e, eliminate right half and viceversa.
    def findPeakElement(self, nums):
        if len(nums) == 1:
            # Index of the only element present in nums.
            return 0
        if len(nums) == 2:
            return max(nums)

        low = 1
        high = len(nums) - 2
        while low <= high:
            mid = (low + high) // 2
            if nums[mid - 1] < nums[mid] and nums[mid] > nums[mid + 1]:
                return mid
            if nums[mid] < nums[mid - 1]:
                high = mid - 1
            else:
                low = mid + 1
        if nums[0] > nums[-1]:
            return 0
        else:
            return len(nums) - 1

==============================================================================================

7. 
koko eating bananas.
Find the minimum number of bananas "k" that can be eaten within(including 'h') "h" hours.
pb link: https://leetcode.com/problems/koko-eating-bananas/
'''
In the pb, minBananas = k
'''

def minEatingSpeed(self, nums: List[int], h: int) -> int:
            if len(nums) == 1:
                return math.ceil(nums[0] / h)
            low = 1
            high = max(nums)
            minBananas = None
            while low <= high:
                mid = (low + high) // 2
                eatTime = sum(map(math.ceil, [i/mid for i in nums]))
                if eatTime <= h:
                    minBananas = mid
                    high = mid - 1
                else :
                    low = mid + 1    
            return minBananas

======================================================================================

8.
Problem Statement: You are given ‘N’ roses and you are also given an array ‘arr’  where ‘arr[i]’  denotes that the ‘ith’ rose will bloom on the ‘arr[i]th’ day.
You can only pick already bloomed roses that are adjacent to make a bouquet. You are also told that you require exactly ‘k’ adjacent bloomed roses to make a single bouquet.
Find the minimum number of days required to make at least ‘m’ bouquets each containing ‘k’ roses. Return -1 if it is not possible.

LC: https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/
bloomDays = [7, 7, 7, 7, 12, 7, 7]
m = 2
k = 3

# Brute force approach:
sortedBloomDays = sorted(bloomDays)
minDays = max(bloomDays)
for i in range(len(sortedBloomDays) - 1, -1, -1):
    startDay = sortedBloomDays[i]
    interArray = [1 if i <= startDay else 0 for i in bloomDays]
    bktsMade = 0
    flowersCollected = 0
    for x in interArray:
        if x == 1:
            flowersCollected += 1
        else:
            flowersCollected = 0
            continue
        if flowersCollected == k:
            flowersCollected = 0
            bktsMade += 1
        if bktsMade == m:
            minDays = startDay
            break
print(minDays)


'
Approach:
With min and max of bloomDays as extremities, do a binary search:
For every (day) mid, check if m bouquets can be made.
If for a mid, m bouqets can be made, eliminate right half to check if the bouquets can be made 
by waiting for even less days.(min days is what's required as the answer.)

if the bouquets can't be done for a mid (day), make low = high + 1 i.e, checking if I can make the 
required number of bouquets by waiting for more days.

# Optimal solution using binary search:
low = min(bloomDays)
high = max(bloomDays)
minDays = min(bloomDays)
while low <= high:
    mid = (low + high) // 2
    bqtsMade = 0
    flowersCollected = 0
    for f in bloomDays:
        if f <= mid:
            flowersCollected += 1
        else:
            flowersCollected = 0
            continue
        if flowersCollected == k:
            flowersCollected = 0
            bqtsMade += 1
        if bqtsMade == m:
            minDays = mid
            high = mid - 1
            break
    if bqtsMade < m:
        low = mid + 1
print(minDays)

======================================================================================

9.Given an array of numbers and another number called as threshold. find the minimum number such that,
upon dividing divide all the numbers in the array,the summation should be less than or equal to threshhold.
 
pb link: https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/

def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        low = 1
        high = max(nums)
        smallDivisor = None
        while low <= high:
            mid = (low + high) // 2
            res = sum([math.ceil(i / mid) for i in nums])
            if res <= threshold:
                smallDivisor = mid
                high = mid - 1
            else:
                low = mid + 1
        return smallDivisor

======================================================================================

10.
Problem Statement: You are the owner of a Shipment company. You use conveyor belts to ship packages from one port to another. The packages must be shipped within ‘d’ days.
The weights of the packages are given in an array ‘of weights’. The packages are loaded on the conveyor belts every day in the same order as they appear in the array. The loaded weights must not exceed the maximum weight capacity of the ship.
Find out the least-weight capacity so that you can ship all the packages within ‘d’ days.

pb Link: https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/

def shipWithinDays(self, weights: List[int], reqDays: int) -> int:
        def daysRequired(nums, div):
            days = 0
            curLoad = 0
            i = 0
            while i <= len(nums) - 1:
                curLoad += nums[i]
                if curLoad == div:
                    curLoad = 0
                    days += 1
                elif curLoad > div:
                    days += 1
                    curLoad = nums[i]
                i += 1
            if curLoad > 0:
                return days + 1
            else:
                return days

        lowWC = max(weights)
        highWC = sum(weights)
        ans = None
        while lowWC <= highWC:
            mid = (lowWC + highWC) // 2
            if daysRequired(weights, mid) <= reqDays:
                highWC = mid - 1
                ans = mid
            else:
                lowWC = mid + 1
        return ans

======================================================================================

11.
pb link: https://takeuforward.org/arrays/kth-missing-positive-number/
You are given a strictly increasing array ‘vec’ and a positive integer ‘k’. Find the ‘kth’ positive integer missing from ‘vec’.
BruteForce(~O(n^2)):

def findKthPositive(self, nums: List[int], k: int) -> int:
    mini = nums[0]
    maxi = nums[-1]

    numOfLeftMissingNums = mini - 1
    numOfBetweenMissingNums = (maxi - mini + 1) - len(nums)
    res = None
    if k <= numOfLeftMissingNums:
        return k
    if numOfLeftMissingNums < k <= (numOfBetweenMissingNums + numOfLeftMissingNums):
        searchArray = []
        i = 0
        while i <= len(nums) - 2:
            if nums[i + 1] - nums[i] == 1:
                i+=1
                continue
            else:
                searchArray += [i for i in range(nums[i]+1, nums[i + 1], 1)]
            i += 1
        return searchArray[k - numOfLeftMissingNums - 1]
    else:
        return maxi + (k - (numOfLeftMissingNums + numOfBetweenMissingNums))

        
optimal:
Eg.input: [2,3,4,7,10]
Explanation is on striver's youtube channel.

"(As per explanation,) The input should have been [1,2,3,4,5] i.e, idx + 1"
def findKthPositive(nums, k):
    low = 0
    high = len(nums) - 1

    while low <= high:
        mid = (low + high) // 2
        # Refer to the line above in double quotes.
        missingNums = nums[mid] - (mid + 1)
        if missingNums < k:
            low = mid + 1
        else:
            high = mid - 1
    """
        what to return?
        low and high are at the opposite polarities in terms of the number of missing nums
        until them.
        now,
        ans = nums[high] + more 
        more is the net after considering previously missed numbers.
        more = k -  'missed numbers until high' (nums[high] - (high+1)) 
        
        so, ans = nums[high] + k - nums[high] + high + 1
        ans = k + high + 1
        ans = k + low
    """
    return low + k

======================================================================================
12.
Problem Statement: You are given an array ‘arr’ of size ‘n’ which denotes the position of stalls.
You are also given an integer ‘k’ which denotes the number of aggressive cows.
You are given the task of assigning stalls to ‘k’ cows such that the minimum distance between any two of them is the maximum possible.
Find the maximum possible minimum distance.

Brute:
Looping over all the range from low to high and calling canBePlaced function. Stop and return the value - 1. value is 
where the loop breaks. i.e the distance at which, we can't place the cows.

Optimal:
stallLocs = [4, 2, 1, 3, 6]
numCows = 2
stallLocs.sort()
maxDist = stallLocs[-1] - stallLocs[0]

minDist = stallLocs[1] - stallLocs[0]
entireDist = minDist

i = 2
while i <= len(stallLocs) - 1:
    dist = stallLocs[i] - stallLocs[i - 1]
    if dist < minDist:
        minDist = dist
    entireDist += dist
    i += 1

low = minDist
high = maxDist

possibleDist = None


def canBePlaced(stallLocs, mid, numCows):
    last = stallLocs[0]
    placed = 1
    for i in range(1, len(stallLocs)):
        if stallLocs[i] - last >= mid:
            placed += 1
            last = stallLocs[i]
        if placed == numCows:
            return True
    return False



while low <= high:
    mid = (low + high) // 2
    if canBePlaced(stallLocs, mid, numCows):
        possibleDist = mid
        low = mid + 1
    else:
        high = mid - 1
print(possibleDist)

======================================================================================
13.

pb link: https://takeuforward.org/data-structure/allocate-minimum-number-of-pages/
pagesInBook = [25, 46, 28, 49, 24]
studs = 4
My soln:
def canThePagesBeAllocated(books, pages, studs):
    i = 0
    canBeAllocated = None
    mini = math.inf
    while i + len(books) - studs < len(books):
        mini = min(mini, sum(books[i: i + (len(books) - studs) + 1]))
        if mini == pages:
            canBeAllocated = True
            break
        i += 1
    if canBeAllocated is None:
        canBeAllocated = False
    return [canBeAllocated, mini >= pages]


low = max(pagesInBook)
high = sum(pagesInBook)
possible = math.inf
while low <= high:
    mid = (low + high) // 2
    res = canThePagesBeAllocated(pagesInBook, mid, numStuds)
    if res[0]:
        possible = min(mid, possible)
        low = mid + 1
    else:
        if res[1]:
            low = mid + 1
            continue
        high = mid - 1
print(possible)

striver's soln:
Apply BS to this?
low = max of pagesInBook
high = sum of pagesInBook
mid = (low + high) // 2
"""


def numStuds(books, pages):
    stud = 1
    pagesStud = 0
    for i in books:
        if pagesStud + i <= pages:
            pagesStud += i
        else:
            stud += 1
            pagesStud = i
    return stud


low = max(pagesInBook)
high = sum(pagesInBook)
while low <= high:
    mid = (low + high) // 2
    res = numStuds(pagesInBook, mid)
    if res > studs:
        low = mid + 1
    else:
        high = mid - 1
print(low)
