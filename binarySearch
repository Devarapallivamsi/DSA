PB: Given an array of numbers and a target, find all the pairs(i,j) of numbers whose sum is less than target.
Note:
-> 0 <= i < j < len(nums)
pb link: 
"https://leetcode.com/problems/count-pairs-whose-sum-is-less-than-target/"
'''
Approach:
Sort the array and keep pointers at extremities and run a loop until low < high
In each run of the loop,check if the nums[right] - nums[left] < target, if so, add
the diff of right and left(which are the Indices) to the pairs(counting) variable.
Reason: If the number at right when summed up to left is less than target,it implies
that all the numbers to the left of the right pointer(which are less) will also form pairs such that
they are less than target when summed up with left pointer.
'''
def countPairs(self, nums: List[int], target: int) -> int:
    if len(nums) == 1:
        return 0

    nums.sort()
    pairs = 0
    left = 0
    right = len(nums) - 1

    while left < right:
        curSum = nums[left] + nums[right]
        if curSum < target:
            pairs += right - left
            left += 1
        else:
            right -= 1
    return pairs
Pb links may be present on striver's website.
1.Searching minimum in rotated sorted array
import math

nums = [4, 5, 6, 7, 1, 2, 3]
minEle = math.inf
low = 0
high = len(nums) - 1

while low <= high:
    mid = (low + high) // 2
    # left half is sorted;
    if nums[mid] >= nums[low]:
        minEle = min(nums[low], minEle)
        low = mid + 1
    else:
        minEle = min(nums[mid], minEle)
        # right half is sorted;
        high = mid - 1
print(minEle)

======================================================================================

2.Finding pivotIdx (Index of min element) in a rotated sorted array:
import math

nums = [4, 5, 6, 2, 3]
left = 0
right = len(nums) - 1
pivot = math.inf
pivotIdx = None
while left < right:
    mid = (left + right) // 2
    pivot = min(pivot, nums[mid])
    if nums[left] <= nums[mid]:
        if nums[left] <= pivot:
            pivotIdx = left
        left = mid + 1
    else:
        if nums[mid] <= pivot:
            pivotIdx = mid
        right = mid - 1

print(f'pivotIdx: {pivotIdx}')
======================================================================================
3.searching element in rotated sorted array 1
'''
approach 1
Find the pivot by traversing the array linearly and in the process if you find k, break and return the idx.
and how to find the pivot? start from left and stop at the index where there is a decrease.
now,even after finding the pivot if I didn't find my ans,my target is in the right half and I shall do a binary search 
with low = pivotIndex +  1 and high = len(arr) - 1
'''
pivotIdx = 0
pos = -1
while arr[pivotIdx] < arr[pivotIdx + 1]:
    if arr[pivotIdx] == target:
        pos = pivotIdx
        break
    pivotIdx += 1
if pos == -1:
    low = pivotIdx + 1
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            pos = mid
            break
        elif arr[mid] > target:
            high = mid - 1
        else:
            low = mid + 1
print(pos)

'''
'''
approach 2
Take low and high and in a while loop, compute mid and if nums[mid] == target, return mid;find the sorted half with 
the logic that if nums[mid] > nums[low] --> left half is sorted
else right half is sorted.
after finding sorted half, check if target is in sorted half's range, if not update the pointers.
This works in a greedy approach in a sense by looking out only for sorted portion and updating pointers.
'''

low = 0
high = len(nums) - 1
while low <= high:
    mid = (low + high) // 2
    if nums[mid] == target:
        return mid
    if nums[low] < nums[mid]:
        """
        Left portion is sorted and right portion is distorted.
        """
        if nums[low] <= target < nums[mid]:
            high = mid - 1
        else:
            low = mid + 1
    else:
        """
        Right portion is sorted and left portion is distorted.
        """
        if nums[high] >= target > nums[mid]:
            low = mid + 1
        else:
                    high = mid - 1

======================================================================================

4.  Finding element in rotated sorted array 2(array having duplicates)
"""
Approach: Just increment low and decrement high by one.Reason: I have got to know that nums[mid] is not my target,
so neither nums[low](=nums[mid]) or nums[high](=nums[mid]) will be my target!!
"""
low = 0
high = len(nums) - 1
while low <= high:
    mid = (low + high) // 2
    if nums[mid] == target:
        return mid
    if nums[low] == nums[mid] == nums[high]:
        low += 1
        high -= 1
        continue
    if nums[low] < nums[mid]:
        """
        Left portion is sorted and right portion is distorted.
        """
        if nums[low] <= target < nums[mid]:
            high = mid - 1
        else:
            low = mid + 1
    else:
        """
        Right portion is sorted and left portion is distorted.
        """
        if nums[high] >= target > nums[mid]:
            low = mid + 1
        else:
            high = mid - 1

======================================================================================

5. Finding the only single occurring element where all others occur twice.
nums = [3, 3, 7, 7, 8, 8, 9, 11, 11]
low = 1
high = len(nums) - 2
while low <= high:
    mid = (low + high) // 2
    if nums[mid] != nums[mid - 1] and nums[mid] != nums[mid + 1]:
        print(nums[mid])
        break
    if (mid % 2 == 0 and nums[mid] == nums[mid + 1]) or (mid % 2 != 0 and nums[mid] == nums[mid - 1]):
        # I am on the left half and eliminate it.
        low = mid + 1
    else:
        # I am on the right half and eliminate it.
        high = mid - 1

===========================================================================================
6.# Finding the peak element(not pivot in rotated array!!) Idx in the array.
peak: An element that's greater than both of it's neighbours.
Note: nums[i] != nums[i - 1] != nums[i + 1]

eg:
1. [1,4,7] possible ans(Idx): 1
2. [1,2,3,4,5,6,4,1,2,9,3] possible ans(Idx): 6, 9;
Approach:
If I am on the point where its prev number is greater, it implies that I am on a downward slope
so I have to move up.i.e, eliminate right half and viceversa.
    def findPeakElement(self, nums):
        if len(nums) == 1:
            # Index of the only element present in nums.
            return 0
        if len(nums) == 2:
            return max(nums)

        low = 1
        high = len(nums) - 2
        while low <= high:
            mid = (low + high) // 2
            if nums[mid - 1] < nums[mid] and nums[mid] > nums[mid + 1]:
                return mid
            if nums[mid] < nums[mid - 1]:
                high = mid - 1
            else:
                low = mid + 1
        if nums[0] > nums[-1]:
            return 0
        else:
            return len(nums) - 1

==============================================================================================

7. 
koko eating bananas.
Find the minimum number of bananas "k" that can be eaten within(including 'h') "h" hours.
pb link: https://leetcode.com/problems/koko-eating-bananas/
'''
In the pb, minBananas = k
'''

def minEatingSpeed(self, nums: List[int], h: int) -> int:
            if len(nums) == 1:
                return math.ceil(nums[0] / h)
            low = 1
            high = max(nums)
            minBananas = None
            while low <= high:
                mid = (low + high) // 2
                eatTime = sum(map(math.ceil, [i/mid for i in nums]))
                if eatTime <= h:
                    minBananas = mid
                    high = mid - 1
                else :
                    low = mid + 1    
            return minBananas

======================================================================================

8.
Problem Statement: You are given ‘N’ roses and you are also given an array ‘arr’  where ‘arr[i]’  denotes that the ‘ith’ rose will bloom on the ‘arr[i]th’ day.
You can only pick already bloomed roses that are adjacent to make a bouquet. You are also told that you require exactly ‘k’ adjacent bloomed roses to make a single bouquet.
Find the minimum number of days required to make at least ‘m’ bouquets each containing ‘k’ roses. Return -1 if it is not possible.

LC: https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/
bloomDays = [7, 7, 7, 7, 12, 7, 7]
m = 2
k = 3

# Brute force approach:
sortedBloomDays = sorted(bloomDays)
minDays = max(bloomDays)
for i in range(len(sortedBloomDays) - 1, -1, -1):
    startDay = sortedBloomDays[i]
    interArray = [1 if i <= startDay else 0 for i in bloomDays]
    bktsMade = 0
    flowersCollected = 0
    for x in interArray:
        if x == 1:
            flowersCollected += 1
        else:
            flowersCollected = 0
            continue
        if flowersCollected == k:
            flowersCollected = 0
            bktsMade += 1
        if bktsMade == m:
            minDays = startDay
            break
print(minDays)


'
Approach:
With min and max of bloomDays as extremities, do a binary search:
For every (day) mid, check if m bouquets can be made.
If for a mid, m bouqets can be made, eliminate right half to check if the bouquets can be made 
by waiting for even less days.(min days is what's required as the answer.)

if the bouquets can't be done for a mid (day), make low = high + 1 i.e, checking if I can make the 
required number of bouquets by waiting for more days.

# Optimal solution using binary search:
low = min(bloomDays)
high = max(bloomDays)
minDays = min(bloomDays)
while low <= high:
    mid = (low + high) // 2
    bqtsMade = 0
    flowersCollected = 0
    for f in bloomDays:
        if f <= mid:
            flowersCollected += 1
        else:
            flowersCollected = 0
            continue
        if flowersCollected == k:
            flowersCollected = 0
            bqtsMade += 1
        if bqtsMade == m:
            minDays = mid
            high = mid - 1
            break
    if bqtsMade < m:
        low = mid + 1
print(minDays)

======================================================================================

9.Given an array of numbers and another number called as threshold. find the minimum number such that,
upon dividing divide all the numbers in the array,the summation should be less than or equal to threshhold.
 
pb link: https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/

def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        low = 1
        high = max(nums)
        smallDivisor = None
        while low <= high:
            mid = (low + high) // 2
            res = sum([math.ceil(i / mid) for i in nums])
            if res <= threshold:
                smallDivisor = mid
                high = mid - 1
            else:
                low = mid + 1
        return smallDivisor

======================================================================================

10.
Problem Statement: You are the owner of a Shipment company. You use conveyor belts to ship packages from one port to another. The packages must be shipped within ‘d’ days.
The weights of the packages are given in an array ‘of weights’. The packages are loaded on the conveyor belts every day in the same order as they appear in the array. The loaded weights must not exceed the maximum weight capacity of the ship.
Find out the least-weight capacity so that you can ship all the packages within ‘d’ days.

pb Link: https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/

def shipWithinDays(self, weights: List[int], reqDays: int) -> int:
        def daysRequired(nums, div):
            days = 0
            curLoad = 0
            i = 0
            while i <= len(nums) - 1:
                curLoad += nums[i]
                if curLoad == div:
                    curLoad = 0
                    days += 1
                elif curLoad > div:
                    days += 1
                    curLoad = nums[i]
                i += 1
            if curLoad > 0:
                return days + 1
            else:
                return days

        lowWC = max(weights)
        highWC = sum(weights)
        ans = None
        while lowWC <= highWC:
            mid = (lowWC + highWC) // 2
            if daysRequired(weights, mid) <= reqDays:
                highWC = mid - 1
                ans = mid
            else:
                lowWC = mid + 1
        return ans

======================================================================================

11.
pb link: https://takeuforward.org/arrays/kth-missing-positive-number/
You are given a strictly increasing array ‘vec’ and a positive integer ‘k’. Find the ‘kth’ positive integer missing from ‘vec’.
BruteForce(~O(n^2)):

def findKthPositive(self, nums: List[int], k: int) -> int:
    mini = nums[0]
    maxi = nums[-1]

    numOfLeftMissingNums = mini - 1
    numOfBetweenMissingNums = (maxi - mini + 1) - len(nums)
    res = None
    if k <= numOfLeftMissingNums:
        return k
    if numOfLeftMissingNums < k <= (numOfBetweenMissingNums + numOfLeftMissingNums):
        searchArray = []
        i = 0
        while i <= len(nums) - 2:
            if nums[i + 1] - nums[i] == 1:
                i+=1
                continue
            else:
                searchArray += [i for i in range(nums[i]+1, nums[i + 1], 1)]
            i += 1
        return searchArray[k - numOfLeftMissingNums - 1]
    else:
        return maxi + (k - (numOfLeftMissingNums + numOfBetweenMissingNums))

        
optimal:
Eg.input: [2,3,4,7,10]
Explanation is on striver's youtube channel.

"(As per explanation,) The input should have been [1,2,3,4,5] i.e, idx + 1"
def findKthPositive(nums, k):
    low = 0
    high = len(nums) - 1

    while low <= high:
        mid = (low + high) // 2
        # Refer to the line above in double quotes.
        missingNums = nums[mid] - (mid + 1)
        if missingNums < k:
            low = mid + 1
        else:
            high = mid - 1
    """
        what to return?
        low and high are at the opposite polarities in terms of the number of missing nums
        until them.
        now,
        ans = nums[high] + more 
        more is the net after considering previously missed numbers.
        more = k -  'missed numbers until high' (nums[high] - (high+1)) 
        
        so, ans = nums[high] + k - nums[high] + high + 1
        ans = k + high + 1
        ans = k + low
    """
    return low + k

======================================================================================
12.
Problem Statement: You are given an array ‘arr’ of size ‘n’ which denotes the position of stalls.
You are also given an integer ‘k’ which denotes the number of aggressive cows.
You are given the task of assigning stalls to ‘k’ cows such that the minimum distance between any two of them is the maximum possible.
Find the maximum possible minimum distance.

Brute:
Looping over all the range from low to high and calling canBePlaced function. Stop and return the value - 1. value is 
where the loop breaks. i.e the distance at which, we can't place the cows.

Optimal:
stallLocs = [4, 2, 1, 3, 6]
numCows = 2
stallLocs.sort()
# After sorting, [1,2,3,4,6]
maxDist = stallLocs[-1] - stallLocs[0]

minDist = stallLocs[1] - stallLocs[0]
entireDist = minDist

i = 2
while i <= len(stallLocs) - 1:
    dist = stallLocs[i] - stallLocs[i - 1]
    if dist < minDist:
        minDist = dist
    entireDist += dist
    i += 1

low = minDist
high = maxDist

possibleDist = None


def canBePlaced(stallLocs, mid, numCows):
    last = stallLocs[0]
    placed = 1
    for i in range(1, len(stallLocs)):
        if stallLocs[i] - last >= mid:
            placed += 1
            last = stallLocs[i]
        if placed == numCows:
            return True
    return False



while low <= high:
    mid = (low + high) // 2
    if canBePlaced(stallLocs, mid, numCows):
        possibleDist = mid
        low = mid + 1
    else:
        high = mid - 1
print(possibleDist)

======================================================================================
13.

pb link: https://takeuforward.org/data-structure/allocate-minimum-number-of-pages/
pagesInBook = [25, 46, 28, 49, 24]
studs = 4
My soln:
def canThePagesBeAllocated(books, pages, studs):
    i = 0
    canBeAllocated = None
    mini = math.inf
    while i + len(books) - studs < len(books):
        mini = min(mini, sum(books[i: i + (len(books) - studs) + 1]))
        if mini == pages:
            canBeAllocated = True
            break
        i += 1
    if canBeAllocated is None:
        canBeAllocated = False
    return [canBeAllocated, mini >= pages]


low = max(pagesInBook)
high = sum(pagesInBook)
possible = math.inf
while low <= high:
    mid = (low + high) // 2
    res = canThePagesBeAllocated(pagesInBook, mid, numStuds)
    if res[0]:
        possible = min(mid, possible)
        low = mid + 1
    else:
        if res[1]:
            low = mid + 1
            continue
        high = mid - 1
print(possible)

striver's soln:
Apply BS to this?
low = max of pagesInBook
high = sum of pagesInBook
mid = (low + high) // 2
"""


def numStuds(books, pages):
    stud = 1
    pagesStud = 0
    for i in books:
        if pagesStud + i <= pages:
            pagesStud += i
        else:
            stud += 1
            pagesStud = i
    return stud


low = max(pagesInBook)
high = sum(pagesInBook)
while low <= high:
    mid = (low + high) // 2
    res = numStuds(pagesInBook, mid)
    if res > studs:
        low = mid + 1
    else:
        high = mid - 1
print(low)

============================================================================
14. pb link: https://takeuforward.org/arrays/minimise-maximum-distance-between-gas-stations/
Brute force:

Brute:
zones = dict.fromkeys([i for i in range(len(gs) - 1)], 0)
placed = 0
zoneToIncrease = None
while placed < k:
    maxDist = -math.inf
    for i in range(1, len(zones) + 1):
        dist = (gs[i] - gs[i - 1]) / (zones[i - 1] + 1)
        if dist >= maxDist:
            maxDist = dist
            zoneToIncrease = i - 1
    zones[zoneToIncrease] += 1
    placed += 1
    maxDist = (gs[zoneToIncrease + 1] - gs[zoneToIncrease]) / (zones[zoneToIncrease] + 1)


# After placing the given gas stations in the zones between, find the max distance between any two by iterating over.
maxDist = -math.inf

for i in range(1,len(gs)):
    maxDist = max(maxDist,(gs[i]-gs[i-1])/(zones[i-1]+1))
print(maxDist)
optimal:
gs = [1, 2, 3, 4, 5]
k = 4

# Optimal Solution
low = 0
high = 0
for i in range(1, len(gs)):
    if gs[i] - gs[i - 1] > high:
        high = gs[i] - gs[i - 1]


def countGs(gs, mid):
    count = 0
    for i in range(1, len(gs)):
        distOfSection = (gs[i] - gs[i - 1]) / mid
        if distOfSection == gs[i]:
            distOfSection -= 1
        count += int(distOfSection)
    return count


while high - low > 1e-6:
    mid = (low + high) / 2
    if countGs(gs, mid) > k:
        low = mid
    else:
        high = mid
print(high)

============================================================================

15. Finding the median of the two sorted arrays.
Brute_1:
Add the two arrays and sort them. return mergedArr[k-1]

Brute_2: 
Have a mechanism to add only the left half of the merged array so that, if even elements are present (totally i.e., n1 + n2)
then return (leftHalfmergedArr[-1] + leftHalfmergedArr[-2]) // 2.0
else:
return mergedArr[-1]

lst = [3, 4, 5, 6, 7]
arr = [1, 2, 3]
givenEles = len(lst) + len(arr)
requiredElesInSortedOrder = givenEles // 2 + 1

medList = []
cur = 0
i = 0 # Iterator for lst
j = 0 # Iterator for arr

while cur < requiredElesInSortedOrder:
    if i >= len(lst):
        medList.append(arr[j])
        i += 1
        cur += 1
        continue

    if j >= len(arr):
        medList.append(lst[i])
        j += 1
        cur += 1
        continue

    if lst[i] <= arr[j]:
        medList.append(lst[i])
        i += 1
        cur += 1

    else:
        medList.append(arr[j])
        j += 1
        cur += 1
# Until now, created a half list.
Now, upon (n1 + n2) % 2, return the appropriate median.

Better:
numsGiven = len(lst) + len(arr)
reqd = numsGiven // 2 + 1

i = 0
j = 0
cur = 0
first = -1
sec = -1
while i < len(lst) and j < len(arr) and cur < reqd:
    if lst[i] <= arr[j]:
        sec = first
        first = lst[i]
        i += 1

    else:
        sec = first
        first = arr[j]
        j += 1
    cur += 1

if cur < reqd:
    while i < len(lst):
        sec = first
        first = lst[i]
        i += 1

    while j < len(arr):
        sec = first
        first = arr[j]
        j += 1

print(first)
print(sec)

if numsGiven % 2 != 0:
    print(first)
else:
    print((first + sec) / 2)

optimal_1
Using merge sort: TC: O(log(m+n))
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        def sortMyList(lst, left, middle, right):
            i = left
            j = middle + 1
            tempList = []
            while i <= middle and j <= right:
                if lst[i] <= lst[j]:
                    tempList.append(lst[i])
                    i += 1
                else:
                    tempList.append(lst[j])
                    j += 1
            while i <= middle:
                tempList.append(lst[i])
                i += 1
            while j <= right:
                tempList.append(lst[j])
                j += 1
            lst[left:right + 1] = tempList[:]
            return lst

        def mergeSort(arr, start, end):
            if start >= end:
                return
            mid = (start + end) // 2
            mergeSort(arr, start, mid)
            mergeSort(arr, mid + 1, end)
            return sortMyList(arr, start, mid, end)

if __name__ == "__main__":
        nums = nums1 + nums2
        mergeSort(nums, 0, len(nums) - 1)
        # When odd number of numbers are given.
        if len(nums) % 2 != 0:
            return nums[len(nums) // 2]
        # When even number of numbers are given.
        return (nums[len(nums) // 2] + nums[(len(nums) // 2) - 1]) / 2

Best Optimal:: Binary search:
def median(arr1, arr2):
    n1 = len(arr1)
    n2 = len(arr2)
    # To get the TC as O(log(min(m,n)))
    if n1 > n2:
        return median(arr2, arr1)
    low = 0
    high = n1

    left = (n1 + n2 + 1) // 2
    while low <= high:
        # The elements that I am going to take from arr1
        mid1 = (low + high) // 2
        # The elements that I am going to take from arr2
        mid2 = left - mid1

        Finally, I will consider 'left' number of elements i.e, mid1 + mid2
        # Here the comparison is with indices. Just checking whether the mid is in bounds of respective
        # indices of the arrays.
        l1 = float('-inf')
        r1 = float('inf')
        l2 = float('-inf')
        r2 = float('inf')
        if mid1 >= 1:
            l1 = arr1[mid1 - 1]
        if mid2 >= 1:
            l2 = arr2[mid2 - 1]
        if mid1 <= n1 - 1:
            r1 = arr1[mid1]
        if mid2 <= n2 - 1:
            r2 = arr2[mid2]

        if r1 >= l2 and r2 >= l1:
            # Found the configuration such that my array is sorted when I take the parts of the arrays
            # separated by l1,l2,r1,r2.
            if (n1 + n2) % 2 == 0:
                return (max(l1, l2) + min(r1, r2)) // 2.0
            return max(l2, l1)
        elif l2 > r1:
            low = mid1 + 1
        else:
            high = mid1 - 1

Pb statement :
Find Kth element in the array that's obtained when we merge the given(two) sorted arrays.

n1 = len(arr1)
n2 = len(arr2)

TC: O(log(min(n1,n2)))
def kThElement(arr1, arr2, k):
    n1 = len(arr1)
    n2 = len(arr2)
    # To minimmise the TC
    if n1 > n2:
        return kThElement(arr2,arr1,k)
    low = 0
    high = n1
    
    while low <= high:
        mid1 = (low + high) // 2
        mid2 = k - mid1
        # If the position of the number to be selected is less than the num of elements taken from first array,(mid1)
        if mid1 > k:
            high = mid1 - 1
            continue
        # If the number of elements to be taken from second array (mid2) are greater than available elements, 
        if mid2 > n2:
            low = mid1 + 1
            continue

        l1 = float('-inf')
        r1 = float('inf')
        l2 = float('-inf')
        r2 = float('inf')

        Initialize the variables only if the mid1 and mid2 are in appropriate bounds.
        if mid1 >= 1:
            l1 = arr1[mid1 - 1]
        if mid1 < n1:
            r1 = arr1[mid1]
        if mid2 >= 1:
            l2 = arr2[(k - mid1) - 1]
        if mid2 < n2:
            r2 = arr2[(k - mid1)]

        # Do a dry run to understand this logic.
        if l1 <= r2 and l2 <= r1:
            # Found the correct k elements on to the left.
            return max(l1, l2)
        
        elif l2 > r1:
            low = mid1 + 1
        else:
            high = mid1 - 1

============================================================================
Pb link: https://takeuforward.org/data-structure/search-in-a-sorted-2d-matrix/

Optimal:
TC: rows*log(cols)
def searchMatrix(self, mat, target):
        rows = len(mat)
        cols = len(mat[0])

        if target > mat[rows - 1][cols - 1]:
            return False

        low = 0
        high = rows - 1
        while low <= high:
            mid = (low + high) // 2
            if mat[mid][0] <= target <= mat[mid][cols - 1]:
                lowI = 0
                highI = cols - 1
                while lowI <= highI:
                    midI = (lowI + highI) // 2
                    if mat[mid][midI] == target:
                        return True
                    if mat[mid][midI] > target:
                        highI = midI - 1
                    else:
                        lowI = midI + 1
            if mat[mid][cols - 1] > target:
                high = mid - 1
            else:
                low = mid + 1
        return False

Best Optimal:
TC: O(log(rows*cols))

nums1 = [1, 3, 4, 7, 10, 12]
nums2 = [2, 3, 6, 15]
k = 2
ans = kThElement(nums1, nums2, k)
print(ans)


    def searchMatrix(self, mat, target):
        rows = len(mat)
        cols = len(mat[0])

        low = 0
        high = rows * cols - 1
        while low <= high:
            mid = (low + high) // 2
            i, j = divmod(mid, cols)
            """
                Why do we get row index as the quotient and col index as the remainder if we divide the index of the number(mid) by number of cols?
                
                Below is its explanation:
                In a 2D matrix, each element can be uniquely identified by its row index and column index.
                Let's say we have a matrix of size m x n (m rows and n columns) and we want to find the row and column
                index of an element at index i in the matrix. To find the row index, we can divide the index i(here, it's mid) by the number
                of columns n. The quotient of this division gives us the row index.         
                This is because every n elements in the matrix belong to the same row. 
                For example, in a matrix of size 3 x 4, the first 4 elements belong to the first row, 
                the next 4 elements belong to the second row, and so on.
                To find the column index, we can take the remainder of the same
                division (i divided by n). This is because the remainder gives us the position of the element within the
                row. For example, if i is 5 and n is 4, then the row index is i/n = 5/4 = 1 (integer division gives us 1)
                and the column index is i mod n = 5 mod 4 = 1.
            """
            if mat[i][j] == target:
                return True
            if mat[i][j] > target:
                high = mid - 1
            else:
                low = mid + 1
        return False

Problem Statement: You have been given a 2-D array ‘mat’ of size ‘N x M’ where ‘N’ and ‘M’ denote the number of rows and columns, respectively.
The elements of each row and each column are sorted in non-decreasing order.
But, the first element of a row is not necessarily greater than the last element of the previous row (if it exists).
You are given an integer ‘target’, and your task is to find if it exists in the given ‘mat’ or not.

pb link: https://leetcode.com/problems/search-a-2d-matrix-ii/

Brute:
Take two loops and check element in each iteration equals the target.

Better:
For each row, do a binary search in the rows if the target is in that row. Ofcourse have a check to eliminate BS in rows where ~(row[0] <= target <= row[lastIdx]).

Optimal:
""" 
Note: Dry run is mostly preferred.
Start at the top right of the matrix/left bottom
Reason: I have sorted values in row and column if I am at one of these positions.
Here, I started at top-right.
First check if the current position I am at, is equal to the target.
Now, Just eliminate a row if the value I am standing at is less than the target i.e, increment the current row.
else, decrement the column.
Now, after all this(If the loop terminates), I can just return false as I didn't find it
"""
 
def findEle(mat, tar):
    rows = len(mat)
    cols = len(mat[0])

    r = 0
    c = cols - 1
    while r <= rows - 1 and cols >= 0:
        if mat[r][c] == tar:
            return True
        if mat[r][c] < tar:
            r += 1
        else:
            c -= 1
    return False


matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22]]
target = 3
ans = findEle(matrix, target)
print(ans)

Problem statement:
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.
Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].
You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.
You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

Brute: Check all elements in two loops.
Better: Start from any position in the grid.While checking if the element currently that we are 
standing at is greater than it's four neighbors (Top, bottom,left,right),
possibilities:
1.return the current position if it is greater than all four neighbors (peak element)
2. Go to the first element where the check failed and repeat the same process.
(It was accepted by leetcode but I am not sure of the time complexity.
In best case: It is O(1) but in worst case, it is O(4*m*n))

The code:

class Solution:
    def findPeakGrid(self, mat: List[List[int]],rPos = 0,cPos = 0) -> List[int]:        
        rows = len(mat)
        cols = len(mat[0])
        value = mat[rPos][cPos]
        # rPos: row position, # cPos: Colum position.
        # All four adjacent cells' positions.
        adjCells = [[rPos - 1, cPos], [rPos + 1, cPos], [rPos, cPos - 1], [rPos, cPos + 1]]
        
        for cellPos in adjCells:
            # Stop at the case when the check fails and call the function itself with the new element (the one with which, the check failed).
            if self.isGreaterThanAdjGrid(mat, cellPos, value, rows, cols):
                continue
            else:
                # This is a recursive implementation and yeah without a base case. But, since we are sure that we shall find a peak, I have coded it this way.
                # This might fail if the number of recursive calls exceed the limit (in cases like very big matrix is given)
                return self.findPeakGrid(mat, cellPos[0], cellPos[1])
        return [rPos, cPos]


    def isGreaterThanAdjGrid(self, grid, pos, value, rows, cols):
            # If either of the index is not in the below range, it implies that the cell is out of bounds and no need to check with it as it's -1 and 
            # Of course, any element in the grid (having all elements positives) is greater than -1.
            if -1 < pos[0] < rows and -1 < pos[1] < cols:
                if grid[pos[0]][pos[1]] > value:
                    return False
            return True
Optimal:

Definitely do a dry run and if needed, go watch the striver's explanation to get this.

My written explanation:
Start with a binary search on the columns, on the  mid's column, find the maximum element of the column (Have a reference to it's position).
Now, check if this maximum element is peak (As this is the maximum element in the column, it is already greater than the top and bottom cells). 
by checking the left and right cells.
If the check satisfies, return this cell position.
If not, update the pointers in the direction of cell where the inequality has arisen.
Eventually, (if a peak exists for sure,) you will find a peak at here or there.

The code:
class Solution:
    def findPeakGrid(self, matrix):
        def findMaxInColumn(grid, rows, cols, md):
            maxi = grid[0][mid]
            maxIdx = 0
            for i in range(1, rows):
                if grid[i][mid] > maxi:
                    maxi = grid[i][mid]
                    maxIdx = i
            return maxIdx

        # BS on columns
        low = 0
        high = len(matrix[0]) - 1
        numRows = len(matrix)
        numCols = len(matrix[0])
        while low <= high:
            mid = (low + high) // 2
            maxRowInTheColumn = findMaxInColumn(matrix, numRows, numCols, mid)
            left = matrix[maxRowInTheColumn][mid - 1] if mid - 1 >= 0 else -1
            right = matrix[maxRowInTheColumn][mid + 1] if mid + 1 <= numCols - 1 else -1
            if matrix[maxRowInTheColumn][mid] > left and matrix[maxRowInTheColumn][mid] > right:
                return [maxRowInTheColumn, mid]
            if matrix[maxRowInTheColumn][mid] < left:
                high = mid - 1
            else:
                low = mid + 1
==========================================================================================================================
Matrix Median:

Optimal:
# Median of the matrix
import math

mat = [[1, 5, 7, 9, 11], [2, 3, 4, 5, 10], [9, 10, 12, 14, 16]]
rows = len(mat)
cols = len(mat[0])
mini = math.inf
maxi = -math.inf

# Find the minimum and maximum of all the given numbers just by traversing through first column and last column.
for i in range(len(mat)):
    mini = min(mini, mat[i][0])
    maxi = max(maxi, mat[i][cols - 1])

low = mini
high = maxi

required = (len(mat) * len(mat[0])) // 2 + 1

# Binary search:
while low <= high:
    mid = (low + high) // 2
    # count = 0
    count = 0
    # Count the number of numbers that are less than the current number(mid)
    # This is done by binary search as the rows are sorted.
    for row in range(len(mat)):
        lowR = 0
        highR = len(mat[row]) - 1
        while lowR <= highR:
            midR = (lowR + highR) // 2
            if mat[row][midR] <= mid:
                lowR = midR + 1
            else:
                highR = midR - 1
        count += lowR
    if count <= required:
        low = mid + 1
    else:
        high = mid - 1

print(low)










